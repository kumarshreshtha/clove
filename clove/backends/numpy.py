import numpy as _np
from clove import binding_utils as _binding_utils
from clove.backends import numpy_bk as _npbk

empty = _binding_utils.wrap_creation_op(_np.empty, _npbk.Numpy)
empty_like = _binding_utils.wrap_creation_op(_np.empty_like, _npbk.Numpy)
eye = _binding_utils.wrap_creation_op(_np.eye, _npbk.Numpy)
identity = _binding_utils.wrap_creation_op(_np.identity, _npbk.Numpy)
ones = _binding_utils.wrap_creation_op(_np.ones, _npbk.Numpy)
ones_like = _binding_utils.wrap_creation_op(_np.ones_like, _npbk.Numpy)
zeros = _binding_utils.wrap_creation_op(_np.zeros, _npbk.Numpy)
zeros_like = _binding_utils.wrap_creation_op(_np.zeros_like, _npbk.Numpy)
full = _binding_utils.wrap_creation_op(_np.full, _npbk.Numpy)
full_like = _binding_utils.wrap_creation_op(_np.full_like, _npbk.Numpy)
array = _binding_utils.wrap_creation_op(_np.array, _npbk.Numpy)
asarray = _binding_utils.wrap_creation_op(_np.asarray, _npbk.Numpy)
asanyarray = _binding_utils.wrap_creation_op(_np.asanyarray, _npbk.Numpy)
ascontiguousarray = _binding_utils.wrap_creation_op(_np.ascontiguousarray,
                                                    _npbk.Numpy)
frombuffer = _binding_utils.wrap_creation_op(_np.frombuffer, _npbk.Numpy)
fromfile = _binding_utils.wrap_creation_op(_np.fromfile, _npbk.Numpy)
fromfunction = _binding_utils.wrap_creation_op(_np.fromfunction, _npbk.Numpy)
fromiter = _binding_utils.wrap_creation_op(_np.fromiter, _npbk.Numpy)
arange = _binding_utils.wrap_creation_op(_np.arange, _npbk.Numpy)
linspace = _binding_utils.wrap_creation_op(_np.linspace, _npbk.Numpy)
logspace = _binding_utils.wrap_creation_op(_np.logspace, _npbk.Numpy)
geomspace = _binding_utils.wrap_creation_op(_np.geomspace, _npbk.Numpy)
meshgrid = _binding_utils.wrap_creation_op(_np.meshgrid, _npbk.Numpy)
diag = _binding_utils.wrap_creation_op(_np.diag, _npbk.Numpy)
diagflat = _binding_utils.wrap_creation_op(_np.diagflat, _npbk.Numpy)
tri = _binding_utils.wrap_creation_op(_np.tri, _npbk.Numpy)
tril = _binding_utils.wrap_creation_op(_np.tril, _npbk.Numpy)
triu = _binding_utils.wrap_creation_op(_np.triu, _npbk.Numpy)
vander = _binding_utils.wrap_creation_op(_np.vander, _npbk.Numpy)
